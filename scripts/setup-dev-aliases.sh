#!/bin/bash
# Developer workflow enforcement - redirects raw Django commands to safe Make targets

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

echo "Setting up safe Django development aliases..."

# Create alias definitions
ALIAS_CONTENT='
# Safe Django Migration Aliases - Auto-generated by setup-dev-aliases.sh
# These redirect potentially dangerous commands to validated Make targets

alias django-makemigrations="echo \"⚠️  Use: make makemigrations (includes validation)\" && false"
alias python\ manage.py\ makemigrations="echo \"⚠️  Use: make makemigrations (includes validation)\" && false"
alias django-migrate="echo \"⚠️  Use: make migrate-safe (includes validation)\" && false"
alias python\ manage.py\ migrate="echo \"⚠️  Use: make migrate-safe (includes validation)\" && false"

# Convenience aliases for safe operations
alias safe-migrate="make makemigrations && make migrate-safe"
alias safe-start="make dev-safe"
alias validate-mig="make validate-migrations"
alias test-mig="make test-migrations-clean"

echo "✅ Safe Django aliases loaded. Use 'safe-migrate' for validated migrations."
'

# Determine shell configuration file
if [ -n "$ZSH_VERSION" ]; then
    SHELL_CONFIG="$HOME/.zshrc"
    SHELL_NAME="zsh"
elif [ -n "$BASH_VERSION" ]; then
    SHELL_CONFIG="$HOME/.bashrc"
    SHELL_NAME="bash"
else
    echo "⚠️  Unknown shell. Please manually add aliases to your shell configuration."
    echo "Aliases to add:"
    echo "$ALIAS_CONTENT"
    exit 1
fi

# Check if aliases already exist
if grep -q "Safe Django Migration Aliases" "$SHELL_CONFIG" 2>/dev/null; then
    echo "✅ Aliases already configured in $SHELL_CONFIG"
else
    echo "📝 Adding safe Django aliases to $SHELL_CONFIG"
    echo "$ALIAS_CONTENT" >> "$SHELL_CONFIG"
    echo "✅ Aliases added to $SHELL_CONFIG"
fi

echo ""
echo "🔄 To activate aliases in current session, run:"
echo "   source $SHELL_CONFIG"
echo ""
echo "📚 Available safe commands:"
echo "   make dev-safe          # Start with migration validation"
echo "   make makemigrations    # Create migrations with validation"
echo "   make migrate-safe      # Apply migrations with validation"
echo "   safe-migrate           # Full migration workflow"
echo "   validate-mig           # Just validate existing migrations"
echo "   test-mig              # Test migrations in clean environment"